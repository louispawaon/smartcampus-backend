// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String        @id @default(uuid())
  supabaseId  String        @unique
  username    String
  fullName    String?
  idNum       String?
  email       String        @unique
  password    String
  role        Role
  Reservation Reservation[]
  Feedback    Feedback[]
}

model Reservation {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  facility      Facility @relation(fields: [facilityId], references: [id])
  facilityId    Int
  department    String?
  purpose       String?
  professorName String?
  classGrade    String?
  filingDate    DateTime @default(now())
  startDate     DateTime
  endDate       DateTime
  status        Status   @default(PENDING)
  equipments    String[]
  equipmentQty  Int[]    @default([0])

  @@unique([userId, facilityId])
}

model Facility {
  id          Int           @id @default(autoincrement())
  roomNum     String?       @unique
  name        String
  description String?
  capacity    Int?
  Reservation Reservation[]
  Feedback    Feedback[]
}

model Feedback {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  facility   Facility @relation(fields: [facilityId], references: [id])
  facilityId Int
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
}

enum Role {
  STUDENT
  TEACHER
  STAFF
}

enum Status {
  CONFIRMED
  PENDING
  CANCELLED
  FINISHED
}
